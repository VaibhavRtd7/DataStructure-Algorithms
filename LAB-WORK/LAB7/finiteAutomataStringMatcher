#include <iostream>
#include <vector>
using namespace std;

const int MAX_CHAR = 256;

// Compute the transition function Î´
void computeTransitionFunction(const string& pattern, vector<vector<int>>& delta) {
    int m = pattern.length();
    for (int state = 0; state <= m; ++state) {
        for (int charIndex = 0; charIndex < MAX_CHAR; ++charIndex) {
            int nextState = min(m, state + 1);
            while (nextState > 0 && pattern[nextState - 1] != charIndex)
                nextState = delta[nextState - 1][charIndex];
            delta[state][charIndex] = nextState;
        }
    }
}

// Finite Automaton Matcher
void finiteAutomatonMatcher(const string& text, const string& pattern) {
    int n = text.length();
    int m = pattern.length();
    
    vector<vector<int>> delta(m + 1, vector<int>(MAX_CHAR, 0));
    computeTransitionFunction(pattern, delta);
    
    int q = 0;  // Initial state
    
    for (int i = 0; i < n; ++i) {
        q = delta[q][text[i]];
        if (q == m) {
            int s = i - m + 1;
            cout << "Pattern occurs with shift s: " << s << endl;
        }
    }
}

int main() {
    string text = "ABABDABACDABABCABAB";
    string pattern = "ABABCABAB";
    
    finiteAutomatonMatcher(text, pattern);
    
    return 0;
}
